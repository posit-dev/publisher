name: "Update Changelog"
description: "Update changelog files for pre-releases by converting Unreleased section to a versioned release"

inputs:
  version:
    description: "Version to use for the release (e.g. 1.21.0)"
    required: true
  main_changelog_path:
    description: "Path to the main CHANGELOG.md file"
    required: false
    default: "CHANGELOG.md"
  vscode_changelog_path:
    description: "Path to the VS Code extension CHANGELOG.md file"
    required: false
    default: "extensions/vscode/CHANGELOG.md"

outputs:
  main_changelog_updated:
    description: "Whether the main changelog was updated"
    value: ${{ steps.update_main.outputs.changes_made }}
  vscode_changelog_updated:
    description: "Whether the VS Code changelog was updated"
    value: ${{ steps.update_vscode.outputs.changes_made || steps.init.outputs.vscode_changelog_updated }}

runs:
  using: "composite"
  steps:
    - name: Initialize outputs
      id: init
      shell: bash
      run: |
        echo "vscode_changelog_updated=false" >> $GITHUB_OUTPUT
        echo "changes_made=false" >> $GITHUB_OUTPUT

    - name: Update main changelog
      id: update_main
      shell: bash
      run: |
        echo "::group::Updating main CHANGELOG.md"

        CHANGELOG_PATH="${{ inputs.main_changelog_path }}"

        # Check if the file exists
        if [ ! -f "$CHANGELOG_PATH" ]; then
          echo "::error::Main changelog file not found at $CHANGELOG_PATH"
          exit 1
        fi

        # Check if there's an [Unreleased] section in the file - do this first before any other operations
        if ! grep -q '\[Unreleased\]' "$CHANGELOG_PATH"; then
          echo "::error::No [Unreleased] section found in $CHANGELOG_PATH. Please add an [Unreleased] section manually before running this action."
          exit 1
        fi

        VERSION="${{ inputs.version }}"
        DATE=$(date +"%Y-%m-%d")

        # Detect if this is a prerelease based on odd minor version number
        if [[ $VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          MINOR="${BASH_REMATCH[2]}"
          if (( MINOR % 2 == 1 )); then
            # Odd minor version number means prerelease
            DISPLAY_VERSION="$VERSION prerelease"
            echo "::notice::Detected odd minor version ($MINOR), using prerelease formatting: $DISPLAY_VERSION"
          else
            # Even minor version number means stable release
            DISPLAY_VERSION="$VERSION"
            echo "::notice::Detected even minor version ($MINOR), using standard formatting: $DISPLAY_VERSION"
          fi
        else
          # For non-standard version formats, don't add prerelease suffix
          DISPLAY_VERSION="$VERSION"
          echo "::notice::Non-standard version format, using as-is: $DISPLAY_VERSION"
        fi

        # Create backup
        cp "$CHANGELOG_PATH" "${CHANGELOG_PATH}.bak"

        # Replace [Unreleased] with new version and add new [Unreleased] section above it
        sed "s/## \[Unreleased\]/## [Unreleased]\n\n## [$DISPLAY_VERSION]/" "$CHANGELOG_PATH" > "${CHANGELOG_PATH}.new"

        # Move the processed file back
        mv "${CHANGELOG_PATH}.new" "$CHANGELOG_PATH"

        # Ensure we've successfully updated the file
        if ! grep -q "## \[$VERSION\]" "$CHANGELOG_PATH" || ! grep -q "## \[Unreleased\]" "$CHANGELOG_PATH"; then
          echo "::error::Failed to update $CHANGELOG_PATH with new version and unreleased section"
          exit 1
        else
          echo "Successfully updated main CHANGELOG.md"
          echo "::notice::Updated [Unreleased] to version [$VERSION] in main CHANGELOG.md"
        fi

        # Clean up all temporary files
        rm -f "${CHANGELOG_PATH}.new" "${CHANGELOG_PATH}.*-e"
        echo "::endgroup::"

        # Output whether we found changes to make
        if git diff --quiet "$CHANGELOG_PATH" "${CHANGELOG_PATH}.bak"; then
          echo "changes_made=false" >> $GITHUB_OUTPUT
          echo "::notice::No changes were needed in main CHANGELOG.md"
        else
          echo "changes_made=true" >> $GITHUB_OUTPUT
          echo "::notice::Changes made to main CHANGELOG.md"
          
          # Show changes for debugging
          echo "::group::Main CHANGELOG.md changes"
          git diff --color=always "${CHANGELOG_PATH}.bak" "$CHANGELOG_PATH" | cat
          echo "::endgroup::"
        fi

        # Remove backup file
        rm -f "${CHANGELOG_PATH}.bak"

    - name: Update VS Code extension changelog
      id: update_vscode
      if: steps.update_main.outputs.changes_made == 'true'
      shell: bash
      run: |
        echo "::group::Updating VS Code extension CHANGELOG.md"

        MAIN_CHANGELOG="${{ inputs.main_changelog_path }}"
        VSCODE_CHANGELOG="${{ inputs.vscode_changelog_path }}"
        VERSION="${{ inputs.version }}"

        # Make backup of VS Code changelog if it exists
        if [ -f "$VSCODE_CHANGELOG" ]; then
          cp "$VSCODE_CHANGELOG" "${VSCODE_CHANGELOG}.bak"
          echo "::notice::VS Code changelog found, updating with content from main changelog"
        else
          echo "::notice::VS Code changelog not found, creating with main changelog content"
          mkdir -p "$(dirname "$VSCODE_CHANGELOG")"
        fi

        # Copy the main changelog to the VS Code changelog
        cp "$MAIN_CHANGELOG" "$VSCODE_CHANGELOG"

        # Customize the VS Code changelog description
        sed -i.bak "s/All notable changes to this project will be documented in this file./All notable changes to the Posit Publisher extension are documented in this\nfile./" "$VSCODE_CHANGELOG"
        rm -f "${VSCODE_CHANGELOG}.bak"

        echo "::notice::Copied and customized main changelog for VS Code extension"

        echo "::notice::Updated VS Code extension CHANGELOG.md with content from main changelog"
        echo "::endgroup::"

        # Output whether we found changes to make
        if [ -f "${VSCODE_CHANGELOG}.bak" ] && git diff --quiet "$VSCODE_CHANGELOG" "${VSCODE_CHANGELOG}.bak"; then
          echo "changes_made=false" >> $GITHUB_OUTPUT
          echo "::notice::No changes were needed in VS Code extension CHANGELOG.md"
        else
          echo "changes_made=true" >> $GITHUB_OUTPUT
          echo "::notice::Changes made to VS Code extension CHANGELOG.md"
          
          # Show changes for debugging if backup exists
          if [ -f "${VSCODE_CHANGELOG}.bak" ]; then
            echo "::group::VS Code CHANGELOG.md changes"
            git diff --color=always "${VSCODE_CHANGELOG}.bak" "$VSCODE_CHANGELOG" | cat
            echo "::endgroup::"
          fi
        fi

        # Remove backup file
        rm -f "${VSCODE_CHANGELOG}.bak" "${VSCODE_CHANGELOG}.tmp" "${VSCODE_CHANGELOG}.*-e"
