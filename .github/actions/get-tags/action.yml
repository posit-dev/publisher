name: "Get Tags"
description: "Get version tags for the specified ref (typically main)"
inputs:
  ref:
    description: "The git ref to check for tags (e.g., main, HEAD)"
    required: true
    default: "HEAD"
  pattern:
    description: "Regex pattern to match tag names"
    required: false
    default: '^v[0-9]+\.[0-9]+\.[0-9]+$'
outputs:
  has-tag:
    description: "Whether the current commit on the specified ref has version tags (true/false). Can be used downstream to determine if a new tag should be created."
    value: ${{ steps.get-tags.outputs.has_tag }}
  existing-tags:
    description: "List of existing version tags on the current commit of the specified ref. Empty if no tags exist on that commit."
    value: ${{ steps.get-tags.outputs.tags }}
  current-sha:
    description: "Full SHA hash of the current commit on the specified ref. Can be used for creating tags on the exact commit."
    value: ${{ steps.get-tags.outputs.sha }}
  all-tags:
    description: 'Comma-separated list of all version tags in the repository, sorted by version number (e.g., "v1.0.0, v1.1.0, v2.0.0").'
    value: ${{ steps.get-tags.outputs.all_tags }}

runs:
  using: "composite"
  steps:
    - name: Get version tags
      id: get-tags
      shell: bash
      run: |
        # Get version tags for the specified ref
        REF="${{ inputs.ref }}"
        PATTERN="${{ inputs.pattern }}"

        echo "Ref: $REF"
        echo "Pattern: $PATTERN"

        # First, verify that the repository has at least one version tag
        # This is a quick check that will fail early if something is wrong
        echo "::group::Checking for existing tags in repository"
        # More efficient direct pattern match with git tag -l
        ALL_TAGS=$(git tag -l "v[0-9]*.[0-9]*.[0-9]*" | grep -E "$PATTERN" || true)
        ALL_TAGS_COUNT=$(echo "$ALL_TAGS" | grep -v "^$" | wc -l | xargs)

        # Show a condensed list of tags (comma separated, sorted by version)
        # Using sort -V ensures proper version sorting (e.g., v1.2.0 comes before v1.10.0)
        CONDENSED_TAGS=$(echo "$ALL_TAGS" | grep -v "^$" | sort -V | tr '\n' ',' | sed 's/,$//' | sed 's/,/, /g')
        echo "Total version tags in repo: $ALL_TAGS_COUNT"
        echo "Tags: $CONDENSED_TAGS"

        # Output all tags for downstream jobs
        echo "all_tags=$CONDENSED_TAGS" >> "$GITHUB_OUTPUT"

        if [ "$ALL_TAGS_COUNT" -eq 0 ]; then
          echo "::error::No version tags found in the repository matching pattern '$PATTERN'. This is unexpected as the repository should have existing version tags."
          echo "::error::Hint: Verify that tags exist and are properly formatted (e.g., 'v1.0.0'). Check if you're using the correct pattern or if the git fetch included tags."
          exit 1
        fi
        echo "::endgroup::"

        # Now check the current commit
        echo "::group::Checking current commit for tags"
        COMMIT_SHA=$(git rev-parse HEAD)
        COMMIT_SHORT=$(git rev-parse --short HEAD)
        echo "Current commit: $COMMIT_SHORT ($COMMIT_SHA)"

        # Find tags matching the pattern for the current commit
        # Using a narrower initial filter to reduce grep workload
        EXISTING_TAGS=$(git tag --points-at "$REF" -l "v[0-9]*.[0-9]*.[0-9]*" | grep -E "$PATTERN" || true)

        # Check for tags on the current commit and set outputs
        HAS_TAGS=false
        if [ -n "$EXISTING_TAGS" ]; then
          HAS_TAGS=true
          echo "Current commit on $REF is already tagged: $EXISTING_TAGS"
        else
          echo "Current commit on $REF ($COMMIT_SHORT) is not tagged"
        fi
        echo "::endgroup::"

        # Set outputs
        echo "has_tag=$HAS_TAGS" >> "$GITHUB_OUTPUT"
        echo "tags=${EXISTING_TAGS:-}" >> "$GITHUB_OUTPUT"

        # Add job summary if running in GitHub Actions
        if [ -n "$GITHUB_STEP_SUMMARY" ]; then
          if [ "$HAS_TAGS" = "true" ]; then
            echo "## 🏷️ Tags Found" >> $GITHUB_STEP_SUMMARY
            echo "The current commit on \`$REF\` ($COMMIT_SHORT) is already tagged: \`$EXISTING_TAGS\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "## 🔍 No Tags on Current Commit" >> $GITHUB_STEP_SUMMARY
            echo "Current commit on \`$REF\` ($COMMIT_SHORT) has no version tags." >> $GITHUB_STEP_SUMMARY
            echo "Found $ALL_TAGS_COUNT total version tags in the repository: \`$CONDENSED_TAGS\`" >> $GITHUB_STEP_SUMMARY
          fi
        fi

        # Output the commit SHA - this provides the exact commit on the specified ref
        echo "sha=$COMMIT_SHA" >> "$GITHUB_OUTPUT"
