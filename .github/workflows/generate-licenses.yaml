name: Generate Licenses
# This workflow is fully self-contained and handles all required setup:
# - Uses setup-node to ensure Node.js is available
# - Runs go mod vendor to update the vendor directory
# - Runs just extensions/vscode deps to install the extension node_modules
on:
  workflow_call:
    inputs:
      commit_changes:
        description: "Whether to commit license changes if found"
        required: false
        default: false
        type: boolean
      pr_changes:
        description: "Whether to create a PR for license changes if found"
        required: false
        default: false
        type: boolean
      fail_on_forbidden:
        description: "Whether to fail if forbidden licenses are found"
        required: false
        default: true
        type: boolean
    secrets:
      POSIT_CONNECT_PROJECTS_APP_ID:
        required: true
      POSIT_CONNECT_PROJECTS_PEM:
        required: true
    outputs:
      has-changes:
        description: "Whether license changes were detected"
        value: ${{ jobs.license-check.outputs.has-changes }}

permissions:
  contents: write

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Validate inputs
        run: |
          if [[ "${{ inputs.commit_changes }}" == "true" && "${{ inputs.pr_changes }}" == "true" ]]; then
            echo "ERROR: Both commit_changes and pr_changes cannot be true simultaneously"
            exit 1
          fi

  license-check:
    runs-on: ubuntu-latest
    needs: validate-inputs
    outputs:
      has-changes: ${{ steps.check-changes.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: ./.github/actions/setup

      # Setup Node.js (required for VSCode extension dependencies)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: npm

      # Install root npm dependencies needed for formatting                                                                                               │ │
      - run: just npm-install

      # We need to prepare the environment for license generation to ensure all required license directories exist
      # Create vendor directory with Go dependencies
      - run: go mod vendor

      # Create VSCode extension's node_modules directories
      - run: just extensions/vscode deps

      # Generate licenses and check for forbidden licenses
      - name: Generate licenses
        id: generate-licenses
        shell: bash
        # This will always fail if required license directories are missing
        # This will also fail if forbidden licenses are found when fail_on_forbidden is true
        run: |
          if [[ "${{ inputs.fail_on_forbidden }}" == "true" ]]; then
            just docs/licenses
          else
            just docs/licenses || echo "WARNING: License issues found but continuing due to fail_on_forbidden=false"
            exit 0
          fi

      - name: Format licenses file
        shell: bash
        run: just format

      - name: Check if changes exist
        id: check-changes
        shell: bash
        run: |
          git add docs/licenses.md
          if ! git diff --staged --quiet; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Show changes
        if: success() && steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "License changes detected:"
          git diff --staged

      - name: Report no changes
        if: success() && steps.check-changes.outputs.has_changes != 'true'
        run: echo "No changes detected in licenses file. Nothing to commit."

      - name: Generate token for GitHub App
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.POSIT_CONNECT_PROJECTS_APP_ID }}
          private-key: ${{ secrets.POSIT_CONNECT_PROJECTS_PEM }}
          permission-contents: write
          permission-pull-requests: write

      - name: Commit license changes
        if: success() && steps.check-changes.outputs.has_changes == 'true' && inputs.commit_changes == true
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit only the licenses file specifically
          # First unstage any other changes that might have been staged
          git reset HEAD

          # Only stage and commit the licenses file
          git add docs/licenses.md
          git commit -m "Update licenses" --only docs/licenses.md

          # Get current branch name
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "Pushing to branch: $BRANCH_NAME"

          # Push using the token for authentication
          git push "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:${BRANCH_NAME}

      - name: Create PR for license changes
        if: success() && steps.check-changes.outputs.has_changes == 'true' && inputs.pr_changes == true
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate-token.outputs.token }}
          base: main
          commit-message: "Update licenses"
          title: "chore: Update licenses"
          body: |
            This PR updates the project's license documentation based on the latest dependencies.

            This update was generated by running .github/workflows/generate-licenses.yaml
          branch: "license-update"
          branch-suffix: timestamp
          add-paths: |
            docs/licenses.md
