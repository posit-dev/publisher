name: Generate Licenses
# This workflow is fully self-contained and handles all required setup:
# - Uses setup-node to ensure Node.js is available
# - Runs go mod vendor to update the vendor directory
# - Runs just extensions/vscode deps to install the extension node_modules
on:
  workflow_call:
    inputs:
      commit_changes:
        description: "Whether to commit license changes if found"
        required: false
        default: false
        type: boolean
      fail_on_forbidden:
        description: "Whether to fail if forbidden licenses are found"
        required: false
        default: true
        type: boolean
    outputs:
      has-changes:
        description: "Whether license changes were detected"
        value: ${{ jobs.license-check.outputs.has-changes }}

permissions:
  contents: write

jobs:
  license-check:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.check-changes.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: ./.github/actions/setup

      # Setup Node.js (required for VSCode extension dependencies)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: npm

      # Install root npm dependencies needed for formatting                                                                                               │ │
      - run: just npm-install

      # We need to prepare the environment for license generation to ensure all required license directories exist
      # Create vendor directory with Go dependencies
      - run: go mod vendor

      # Create VSCode extension's node_modules directories
      - run: just extensions/vscode deps

      # Generate licenses and check for forbidden licenses
      - name: Generate licenses
        id: generate-licenses
        shell: bash
        # This will fail if forbidden licenses are found (if fail_on_forbidden is true)
        # or if required directories are missing
        run: |
          if [[ "${{ inputs.fail_on_forbidden }}" == "true" ]]; then
            just docs/licenses
          else
            just docs/licenses || echo "WARNING: License issues found but continuing due to fail_on_forbidden=false"
            exit 0
          fi

      # Save unformatted license file for comparison
      - name: Save unformatted license file
        shell: bash
        run: cp docs/licenses.md /tmp/licenses-unformatted.md

      # Format the licenses file for consistency
      - name: Format licenses file
        shell: bash
        run: just format

      # Upload unformatted and formatted license files as artifacts for comparison
      - name: Upload license files for comparison
        uses: actions/upload-artifact@v4
        with:
          name: license-comparison
          path: |
            /tmp/licenses-unformatted.md
            docs/licenses.md
          retention-days: 5

      # Check if changes were made to the licenses file
      - name: Check if changes exist
        id: check-changes
        shell: bash
        run: |
          git add docs/licenses.md
          if ! git diff --staged --quiet; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Show changes
        if: success() && steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "License changes detected:"
          git diff --staged

      - name: Report no changes
        if: success() && steps.check-changes.outputs.has_changes != 'true'
        run: echo "No changes detected in licenses file. Nothing to commit."

      # Conditional commit step based on input parameter
      - name: Commit license changes
        if: success() && steps.check-changes.outputs.has_changes == 'true' && inputs.commit_changes == true
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -m "Update licenses [skip ci]"
          git push

      - name: Dry run notice
        if: success() && steps.check-changes.outputs.has_changes == 'true' && inputs.commit_changes == false
        run: |
          echo "Changes were detected but not committed due to commit_changes=false setting."
