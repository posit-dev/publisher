name: Pull Request
on:
  pull_request

# A note on debugging a github step:
#   You can ssh into the github action environment and poke around by using
#   https://github.com/marketplace/actions/debugging-with-tmate
#   Use `limit-access-to-actor: true` so only you can ssh into the environment!
#  
#   For example, to debug a failure, append this to the jobs list within the failing step
#   - name: Setup tmate session
#     if: ${{ failure() }}
#     uses: mxschmitt/action-tmate@v3
#     with:
#       limit-access-to-actor: true
#

jobs:
  pr-code-validation:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: build docker image
        run: just image
      - name: install dependencies
        run: just install
      - name: lint the source files
        run: just lint
      - name: build the CLI client and Web UX
        run: just build
      - name: lint the build dependent files
        run: just post-build-lint
      - name: run all tests
        run: just test
      - uses: actions/upload-artifact@v3
        with:
          path: bin/

  build-linux-images:
    runs-on: ubuntu-latest
    needs: pr-code-validation
    strategy:
      matrix:
        CLIENT:
          - linux-amd64
          - linux-arm64
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Setup Just
        uses: extractions/setup-just@v1
      # - 
      #   name: Download artifacts
      #   uses: actions/download-artifact@v3
      #   with:
      #     path: bin/
      # these are required to run docker on amd64 and arm64 platforms
      - 
        name: Setup qemu
        uses: docker/setup-qemu-action@v2
      - 
        name: Setup buildx
        uses: docker/setup-buildx-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - 
        name: Restore Cached docker images
        id: cache-linux-arm64-restore
        uses: actions/cache/restore@v3
        with: 
          path: /tmp/linux-arm64-image.tar
          key: ${{ runner.os }}-linux-arm64-image-${{ env.cache-name }}-${{ hashFiles('test/docker/linux.Dockerfile') }}
        env:
          cache-name: cache-linux-arm64-image
          CLIENT: "${{ matrix.CLIENT }}"
      - 
        if: ${{ steps.cache-linux-arm64-restore.outputs.cache-hit != 'true' }}
        name: Build and Export Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: BUILDKIT_INLINE_CACHE=1 
          pull: True
          file: test/docker/linux.Dockerfile
          tags: rstudio/connect-client-linux-arm64:latest
          outputs: type=docker,dest=/tmp/linux-arm64-image.tar
      - 
        if: ${{ steps.cache-linux-arm64-restore.outputs.cache-hit != 'true' }}
        name: Cache docker image (update)
        id: cache-linux-arm64-image-save
        uses: actions/cache/save@v3
        env:
          cache-name: cache-linux-arm64-image
        with:
          path: /tmp/build-image.tar
          key: ${{ runner.os }}-linux-arm64-image-${{ env.cache-name }}-${{ hashFiles('test/docker/linux.Dockerfile') }}
    
  test-windows-client:
    needs: pr-code-validation
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1
      - uses: actions/download-artifact@v3
        with:
          path: bin/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Windows Tests
        env:
          CLIENT: windows-latest
          # bats reads the load libraries from relative path only in Windows
          BATS_SUPPORT_LIB: ..\..\libs\bats-support\load.bash
          BATS_ASSERT_LIB: ..\..\libs\bats-assert\load
        run: |
          cp -r bin\artifact\* bin\ && chmod +x bin\*\*
          just test/bats-install
          $env:Path += ";$env:GITHUB_WORKSPACE\test\libs\bats-core\bin"
          $env:BINARY_PATH = "$env:GITHUB_WORKSPACE\bin\windows-amd64\connect-client"
          cd $env:GITHUB_WORKSPACE\test
          just run-client $env:CLIENT

  test-macos-client:
    needs: pr-code-validation
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1
      - uses: actions/download-artifact@v3
        with:
          path: bin/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run macos
        env:
          CLIENT: macos-latest
          BATS_SUPPORT_LIB: ${{ github.workspace }}/test/libs/bats-support/load
          BATS_ASSERT_LIB: ${{ github.workspace }}/test/libs/bats-assert/load
          BINARY_PATH: ${{ github.workspace }}/bin/darwin-amd64/connect-client
        run: |
          cp -r bin/artifact/* bin/ && chmod +x bin/*/*
          just test/bats-install
          PATH="$PATH:${{ github.workspace }}/test/libs/bats-core/bin"
          cd ${{ github.workspace }}/test
          just run-client ${CLIENT}

  test-linux-clients:
    runs-on: ubuntu-latest
    needs: pr-code-validation
    strategy:
      matrix:
        CLIENT:
          - linux-amd64
          - linux-arm64
    steps:
      - uses: actions/checkout@v3
      - uses: extractions/setup-just@v1
      - uses: actions/download-artifact@v3
        with:
          path: bin/
      # these are required to run docker on amd64 and arm64 platforms
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Linux Tests
        env:
          CLIENT: "${{ matrix.CLIENT }}"
        run: |
          cp -r bin/artifact/* bin/ && chmod +x bin/*/*
          just test/run-client ${CLIENT}
