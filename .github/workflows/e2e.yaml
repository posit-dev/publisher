name: E2E Tests
on:
  workflow_call:
    secrets:
      CONNECT_LICENSE:
        required: true

jobs:
  cypress:
    name: e2e tests (cypress)
    runs-on: ubuntu-latest
    env:
      DEBUG_CYPRESS: "false" # Set to true to enable extra logging and video recording replays
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: test/e2e/requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: test/e2e/package-lock.json

      - name: Install Python dependencies
        working-directory: test/e2e
        run: pip install -r requirements.txt

      - name: Install npm dependencies
        working-directory: test/e2e
        run: npm ci

      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ~/.cache/Cypress
          key: ${{ runner.os }}-cypress-${{ hashFiles('test/e2e/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-cypress-

      - name: Install Cypress
        working-directory: test/e2e
        run: npx cypress install

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-chromium-${{ hashFiles('test/e2e/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-chromium-

      - name: Install Playwright browsers
        working-directory: test/e2e
        run: npx playwright install chromium

      - uses: extractions/setup-just@v3

      - name: Download VSIX artifact
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist

      - name: Write Connect license file
        if: env.CONNECT_LICENSE != ''
        run: |
          mkdir -p ./test/e2e/licenses
          echo "$CONNECT_LICENSE" > ./test/e2e/licenses/connect-license.lic
        env:
          CONNECT_LICENSE: ${{ secrets.CONNECT_LICENSE }}

      - name: Build Docker images
        working-directory: test/e2e
        run: |
          # Use buildkit for better caching and parallel builds
          export DOCKER_BUILDKIT=1
          export COMPOSE_DOCKER_CLI_BUILD=1

          docker build --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg GH_DOWNLOAD_TOKEN=${{ secrets.GH_DOWNLOAD_TOKEN }} \
            -f Dockerfile.base -t e2ebase --platform linux/amd64 . &

          # Build compose services in parallel after base is ready
          wait
          docker compose build --parallel connect-publisher-e2e code-server
        env:
          CONNECT_LICENSE: ${{ secrets.CONNECT_LICENSE }}

      - name: Start containers
        working-directory: test/e2e
        run: docker compose up -d connect-publisher-e2e code-server

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          (
            echo "Checking Connect server..."
            for i in {1..20}; do
              if curl -sf http://localhost:3939/__ping__ > /dev/null; then
                echo "Connect server is ready!"
                exit 0
              fi
              sleep 1
            done
            echo "WARNING: Timeout waiting for Connect server"
          ) &

          (
            echo "Checking code-server..."
            for i in {1..20}; do
              if curl -sf http://localhost:8080 > /dev/null; then
                echo "code-server is ready!"
                exit 0
              fi
              sleep 1
            done
            echo "code-server did not become ready in time"
            exit 1
          ) &

          wait

      - name: Install and wait for VS Code extension to be ready
        working-directory: test/e2e
        run: |
          # Install the Publisher extension and set ownership in parallel
          VSIX_FILENAME=$(ls -Art ../../dist | grep linux-amd64 | tail -n 1)
          docker compose exec code-server code-server --install-extension "/home/coder/vsix/${VSIX_FILENAME}" &

          # Set proper ownership for workspace files while extension installs
          docker exec publisher-e2e.code-server chown -R coder:coder /home/coder/workspace &

          wait

          # Wait for the extension to be installed (reduced timeout)
          echo "Waiting for Publisher extension to be installed..."
          for i in {1..30}; do
            if docker compose exec code-server code-server --list-extensions | grep -q posit.publisher; then
              echo "Publisher extension appears to be installed!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "WARNING: Timeout waiting for Publisher extension to be installed"
            fi
            echo "Waiting for extension installation (attempt $i/30)..."
            sleep 1
          done

      - name: Prepare test environment
        working-directory: test/e2e
        run: |
          # Ensure content-workspace directory exists
          mkdir -p ./content-workspace

          # Clean up any static TOML files before tests
          docker exec publisher-e2e.code-server rm -f /home/coder/workspace/static*.toml || true

      - name: Run Cypress tests
        working-directory: test/e2e
        run: npx cypress run --headless --browser chrome
        env:
          CONNECT_LICENSE: ${{ secrets.CONNECT_LICENSE }}
          CONNECT_CLOUD_ENV: ${{ env.CONNECT_CLOUD_ENV }} # defaults to staging
          CI: true
          DEBUG_CYPRESS: ${{ env.DEBUG_CYPRESS }}
          ACTIONS_STEP_DEBUG: ${{ env.DEBUG_CYPRESS }}
          PCC_USER_CCQA3: ${{ secrets.PCC_USER_CCQA3 }}
          CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

      - name: Upload Cypress screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: test/e2e/cypress/screenshots
          if-no-files-found: ignore

      - name: "[DEBUG] Upload Cypress videos"
        uses: actions/upload-artifact@v4
        if: always() && env.DEBUG_CYPRESS == 'true'
        with:
          name: cypress-videos
          path: test/e2e/cypress/videos
          if-no-files-found: ignore

      - name: "[DEBUG] List installed VS Code extensions"
        if: always() && (env.DEBUG_CYPRESS == 'true' || runner.debug)
        working-directory: test/e2e
        run: docker compose exec code-server code-server --list-extensions --show-versions || true

      - name: "[DEBUG] Display test/e2e directory tree"
        if: always() && (env.DEBUG_CYPRESS == 'true' || runner.debug)
        run: |
          echo "Directory tree for test/e2e:"
          if command -v tree > /dev/null; then
            tree -I "node_modules|.venv" test/e2e
          else
            find test/e2e -path "*/node_modules" -prune -o -path "*/.venv" -prune -o -print
          fi

      - name: "[DEBUG] Print code-server logs"
        if: always() && (env.DEBUG_CYPRESS == 'true' || runner.debug)
        run: |
          echo "=== Code Server Log Files ==="
          docker exec publisher-e2e.code-server bash -c 'find /root/.local -type f -name "*.log" 2>/dev/null | while read -r file; do echo "FILE: $file"; done'
          echo "=== Main Code Server Logs (sample) ==="
          docker exec publisher-e2e.code-server bash -c 'cat /root/.local/share/code-server/coder-logs/code-server-*.log 2>/dev/null | tail -n 50 || echo "No logs found"'
          echo "=== Extension Host Logs (sample) ==="
          docker exec publisher-e2e.code-server bash -c 'find /root/.local -name "remoteexthost.log" -type f 2>/dev/null | head -n 1 | xargs cat | tail -n 50 || echo "No logs found"'

      - name: "[DEBUG] Print Publisher extension logs"
        if: always() && (env.DEBUG_CYPRESS == 'true' || runner.debug)
        run: |
          echo "=== Finding Publisher logs ==="
          docker exec publisher-e2e.code-server bash -c 'find /root -type f -name "*.log" 2>/dev/null | grep -i "posit\|publisher" || echo "No publisher logs found"'
          docker exec publisher-e2e.code-server bash -c 'find /home -type f -name "*.log" 2>/dev/null | grep -i "posit\|publisher" || echo "No publisher logs found"'
          echo "======================================="

      - name: "[DEBUG] Print code-server container logs"
        if: always() && env.DEBUG_CYPRESS == 'true'
        working-directory: test/e2e
        run: docker compose logs code-server || true

      - name: Stop containers
        if: always()
        working-directory: test/e2e
        run: just stop
