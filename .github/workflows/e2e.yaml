name: E2E Tests
on:
  workflow_call:
    secrets:
      CONNECT_LICENSE:
        required: true

jobs:
  cypress:
    name: e2e tests (cypress)
    runs-on: ubuntu-latest
    env:
      DEBUG_CYPRESS: "true" # Set to true to enable extra logging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: test/e2e/requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: test/e2e/package-lock.json

      - name: Install Python dependencies
        working-directory: test/e2e
        run: pip install -r requirements.txt

      - name: Install npm dependencies
        working-directory: test/e2e
        run: npm ci

      - uses: extractions/setup-just@v2

      - name: Build publisher binary
        run: just build

      - name: Download VSIX artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Build Docker images
        working-directory: test/e2e
        run: |
          docker build --build-arg GH_DOWNLOAD_TOKEN=${{ secrets.GH_DOWNLOAD_TOKEN }} -f Dockerfile.base -t e2ebase --platform linux/amd64 .
          docker compose build connect-publisher-e2e code-server
        env:
          CONNECT_LICENSE: ${{ secrets.CONNECT_LICENSE }}

      - name: Print host user and group info
        if: env.DEBUG_CYPRESS == 'true'
        run: |
          echo "USER: $(whoami)"
          echo "UID: $(id -u)"
          echo "GID: $(id -g)"
          id
          ls -ld .

      - name: Ensure content-workspace exists
        run: mkdir -p ./test/e2e/content-workspace

      - name: Start containers
        working-directory: test/e2e
        run: |
          just start "connect-publisher-e2e"
          just start "code-server"

      - name: Wait for Connect server to be ready
        run: |
          echo "Waiting for Connect server to be ready..."
          for i in {1..30}; do
            if curl -sf http://localhost:3939/__ping__ > /dev/null; then
              echo "Connect server is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "WARNING: Timeout waiting for Connect server to be ready"
              # Continue anyway, don't exit with error
            fi
            echo "Waiting for Connect server (attempt $i/30)..."
            sleep 2
          done

      - name: Stop any processes using port 8080
        run: |
          PID=$(docker exec publisher-e2e.code-server sh -c "lsof -ti :8080 || netstat -tulnp 2>/dev/null | grep ':8080' | awk '{print \$7}' | cut -d'/' -f1 | head -n1" || true)
          if [ -n "$PID" ]; then
            echo "Killing process $PID using port 8080"
            docker exec publisher-e2e.code-server kill -9 $PID || true
          else
            echo "No process using port 8080"
          fi

      - name: Wait for code-server to be ready
        run: |
          for i in {1..30}; do
            if curl -sf http://localhost:8080 > /dev/null; then
              echo "code-server is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "code-server did not become ready in time"
              exit 1
            fi
            sleep 2
          done

      - name: List VSIX files on host
        working-directory: test/e2e
        run: ls -l ../../dist || true

      - name: List VSIX files in container
        working-directory: test/e2e
        run: docker compose exec code-server ls -l /home/coder/vsix || true

      - name: Install and wait for VS Code extension to be ready
        working-directory: test/e2e
        run: |
          # Install the Publisher extension
          VSIX_FILENAME=$(ls -Art ../../dist | grep linux-amd64 | tail -n 1)
          docker compose exec code-server code-server --install-extension "/home/coder/vsix/${VSIX_FILENAME}"

          # Wait for the extension to be installed (more reliable than process grep)
          echo "Waiting for Publisher extension to be installed..."
          for i in {1..60}; do
            if docker compose exec code-server code-server --list-extensions | grep -q posit.publisher; then
              echo "Publisher extension appears to be installed!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "WARNING: Timeout waiting for Publisher extension to be installed"
            fi
            echo "Waiting for extension installation (attempt $i/60)..."
            sleep 2
          done

      - name: Print workspace file ownership before tests
        if: env.DEBUG_CYPRESS == 'true'
        run: |
          docker exec publisher-e2e.code-server ls -lR /home/coder/workspace || true

      - name: Prepare test environment
        working-directory: test/e2e
        run: |
          # Clean up any static TOML files before tests run to avoid 'file not found' errors
          docker exec publisher-e2e.code-server rm -f /home/coder/workspace/static*.toml || true

      - name: Run Cypress tests
        working-directory: test/e2e
        run: npx cypress run
        env:
          CONNECT_LICENSE: ${{ secrets.CONNECT_LICENSE }}
          CONNECT_CLOUD_ENV: ${{ env.CONNECT_CLOUD_ENV }} # defaults to staging
          CI: true

      - name: Upload Cypress screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: test/e2e/cypress/screenshots
          if-no-files-found: ignore

      - name: Upload Cypress videos on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-videos
          path: test/e2e/cypress/videos
          if-no-files-found: ignore

      - name: List installed VS Code extensions
        if: env.DEBUG_CYPRESS == 'true'
        run: docker compose exec code-server code-server --list-extensions --show-versions || true

      - name: Print code-server logs on failure
        if: failure() && env.DEBUG_CYPRESS == 'true'
        run: |
          docker exec publisher-e2e.code-server cat /root/.local/share/code-server/logs/*/* || true

      - name: Print Publisher extension logs on failure
        if: failure() && env.DEBUG_CYPRESS == 'true'
        run: |
          echo "=== Last 50 lines of Publisher logs ==="
          docker exec publisher-e2e.code-server bash -c 'find /root/.local/share/code-server/logs -type f -name "*.log" | grep -E "posit.publisher|Deployment.log" | xargs tail -n 50 || true'
          echo "======================================="

      - name: Print code-server container logs
        if: failure() && env.DEBUG_CYPRESS == 'true'
        run: docker compose logs code-server || true

      - name: List /home/coder directory contents
        if: failure() && env.DEBUG_CYPRESS == 'true'
        run: docker exec publisher-e2e.code-server ls -lR /home/coder || true

      - name: Find all logs directories
        if: failure() && env.DEBUG_CYPRESS == 'true'
        run: |
          docker exec publisher-e2e.code-server find / -type d -name logs 2>/dev/null | grep -v "/proc/" || true

      - name: Find all recent log files
        if: failure() && env.DEBUG_CYPRESS == 'true'
        run: |
          docker exec publisher-e2e.code-server find / -type f \( -name "*.log" -o -name "*.txt" \) 2>/dev/null | grep -v "/proc/" || true

      - name: Print process info on failure
        if: failure() && env.DEBUG_CYPRESS == 'true'
        run: |
          docker exec publisher-e2e.code-server ps aux || true

      - name: Stop containers
        if: always()
        working-directory: test/e2e
        run: just stop
