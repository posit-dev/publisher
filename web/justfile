# Executes clean, install, test, build
default: install lint test build

export CYPRESS_CACHE_FOLDER := "./cypress/.cache"

_ci := "${CI:-false}"

_with_debug := if env_var_or_default("DEBUG", "true") == "true" {
        "set -x pipefail"
    } else {
        ""
    }

# Compiles the static assests for the web client. Static assets are written to `./web/dist`.
build:
    npm run build

e2e:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    npx cypress install
    npm run e2e

# Fixes formatting using ESLint
fix:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    npm run fix

# Installs dependencies
install:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    if [ {{ _ci }} = "true" ]; then
        npm ci --no-audit --no-fund
    else
        npm install --no-audit --no-fund
    fi

# Checks formatting using ESLint
lint:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    npm run lint

# Executes commands via `npm`. Equivalent to `npm run`. Provides arbitrary command chaining inside of Docker from project root (i.e., `just web run preview`)
run *args:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    npm run {{ args }}


# Executes unit tests
test:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    npm run test

# Watches unit tests
watch:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    npm run watch

# run e2e (Cypress) tests against dev server
test-e2e-dev:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    # install cypress
    npx cypress install

    npm run test:e2e:dev

# run e2e (Cypress) tests
test-e2e:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    # install cypress
    npx cypress install

    npm run test:e2e:ci

build-and-test-ci-e2e target:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    just build

    # install cypress
    npx cypress install

    npm run test:e2e:ci

# run unit tests one time
test-unit:
    npm run test:unit run



# start common UX development flow. Start the web server which updates automatically upon file changes
dev:
    npm run dev

# start a locally run production build of the web Ux
preview:
    npm run preview

# remove build artifacts and dependencies
clean:
    #!/usr/bin/env bash
    set -eou pipefail
    {{ _with_debug }}

    # not using quasar clean, as it would require us to have node_modules fully installed. Instead, performing what
    # it said it was doing...
    # quasar clean
    # App • Cleaned build artifact: "/work/web/.quasar"
    # App • Emptied dist folder
    # App • Done cleaning build artifacts
    rm -rdf .quasar
    rm -rdf dist
    rm -rdf node_modules
