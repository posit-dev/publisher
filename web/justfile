_use_docker := env_var_or_default("DOCKER", "true")

# will run recipes: bootstrap, validate, build, and test
default: bootstrap validate build test

install:
    just bootstrap

# update javascript/typescript dependencies
bootstrap:
    #!/bin/bash
    set -euo pipefail

    # set this environment variable to keep Cypress from attempting
    # to create a cache within roots home dir.
    export CYPRESS_CACHE_FOLDER="./cypress/.cache"
    echo "NOTE: npm install may take five minutes or more from within a docker container..."
    npm install --no-audit


lint:
    #!/bin/bash
    set -euo pipefail

    npm run lint

# validate the source files, do not fix the fixable items
validate:
    npm run lint

# validate the source files, fix the fixable items
validate-fix:
    npm run lint-fix

# build the web artifacts for the SPA (into dest/spa)
build: bootstrap
    npm run build

# perform unit, go race and e2e tests
test: test-unit test-race test-e2e

# perform race testing
test-race:
    go test -race ./...

# run e2e (Cypress) tests against dev server
test-e2e-dev:
    #!/bin/bash
    set -euo pipefail

    # set this environment variable to keep Cypress from attempting to create
    # cache within roots home dir.
    export CYPRESS_CACHE_FOLDER="./cypress/.cache"
    # install cypress
    npx cypress install

    npm run test:e2e:dev

# run e2e (Cypress) tests
test-e2e:
    #!/bin/bash
    set -euo pipefail

    # set this environment variable to keep Cypress from attempting to create
    # cache within roots home dir.
    export CYPRESS_CACHE_FOLDER="./cypress/.cache"
    # install cypress
    npx cypress install

    npm run test:e2e:ci

build-and-test-ci-e2e target:
    #!/bin/bash
    set -euo pipefail
    just build
    # set this environment variable to keep Cypress from attempting to create
    # cache within roots home dir.
    # use a different cache per os
    export CYPRESS_CACHE_FOLDER="./cypress/{{target}}/.cache"
    # install cypress
    npx cypress install

    npm run test:e2e:ci

# run unit tests one time
test-unit:
    npm run test:unit run

# run unit tests in watch mode, re-running as files are changed
test-unit-watch:
    npm run test:unit

# start common UX development flow. Start the web server which updates automatically upon file changes
dev:
    npm run dev

# start a locally run production build of the web Ux
preview:
    npm run preview

# remove build artifacts and dependencies
clean:
    #!/usr/bin/env bash
    set -euo pipefail

    # not using quasar clean, as it would require us to have node_modules fully installed. Instead, performing what
    # it said it was doing...
    # quasar clean
    # App • Cleaned build artifact: "/work/web/.quasar"
    # App • Emptied dist folder
    # App • Done cleaning build artifacts
    rm -rdf .quasar
    rm -rdf dist
    rm -rdf node_modules
