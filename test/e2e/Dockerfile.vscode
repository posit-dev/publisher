# Image which contains:
# Multiple Versions of R, Python and Quarto
# VS Code server with extensions for python, r and quarto

FROM ubuntu:22.04

ARG OS_IDENTIFIER=ubuntu-2204

# Configure apt-get to use the mirror in us-east-1 instead of the Docker default of archive.ubuntu.com
RUN sed -i "s/archive.ubuntu.com/us-east-1.ec2.archive.ubuntu.com/g" /etc/apt/sources.list

# Install dependencies
RUN export DEBIAN_FRONTEND=noninteractive && \
    apt-get update && \
    apt-get install -y \
    apt-transport-https \
    build-essential \
    curl \
    dnsutils \
    gawk \
    gfortran \
    git \
    ldap-utils \
    libbz2-dev \
    libcurl4-openssl-dev \
    libdeflate-dev \
    libev-dev \
    libffi-dev \
    liblzma-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libopenblas-dev \
    libpaper-utils \
    libpcre2-dev \
    libreadline-dev \
    libsodium-dev \
    libssl-dev \
    libsqlite3-dev \
    libxml2-dev \
    libzmq3-dev \
    liblzma-dev \
    llvm \
    make \
    media-types \
    mailcap \
    python3-openssl \
    rrdtool \
    software-properties-common \
    sssd-ldap \
    sudo \
    tk-dev \
    unzip \
    vim \
    wget \
    xz-utils \
    zip \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# 
# Install Multiple Versions of Python
# 

# # Install UV
# ADD https://astral.sh/uv/0.5.29/install.sh /uv-installer.sh
# RUN sh /uv-installer.sh && rm /uv-installer.sh
# ENV PATH="/root/.local/bin/:$PATH"

# # Install Python using UV
# ENV PYTHON_VERSION="3.10.16"
# RUN UV_PYTHON_INSTALL_DIR=/opt/python uv python install ${PYTHON_VERSION}
# # /opt/python/cpython-3.10.16-linux-x86_64-gnu/bin/python3

# ENV PYTHON_VERSION="3.11.11"
# RUN UV_PYTHON_INSTALL_DIR=/opt/python uv python install ${PYTHON_VERSION}
# # /opt/python/cpython-3.11.11-linux-x86_64-gnu/bin/python3


# ENV PYTHON_VERSION="3.12.9"
# RUN UV_PYTHON_INSTALL_DIR=/opt/python uv python install ${PYTHON_VERSION}
# # /opt/python/cpython-3.12.9-linux-x86_64-gnu/bin/python3

# # last install makes it active
# # /usr/bin/python3 -> python3.12

# Install Python and make it default (used by build scripts)
ARG PYTHON_VERSION=3.10.16
RUN curl -fsSL -O https://cdn.rstudio.com/python/${OS_IDENTIFIER}/pkgs/python-${PYTHON_VERSION}_1_amd64.deb \
    && export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install -f -y ./python-${PYTHON_VERSION}_1_amd64.deb \
    && rm python-${PYTHON_VERSION}_1_amd64.deb \
    && rm -rf /var/lib/apt/lists/* \
    && /opt/python/${PYTHON_VERSION}/bin/pip install --upgrade pip setuptools wheel

ARG PYTHON_VERSION=3.11.11
RUN curl -fsSL -O https://cdn.rstudio.com/python/${OS_IDENTIFIER}/pkgs/python-${PYTHON_VERSION}_1_amd64.deb \
    && export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install -f -y ./python-${PYTHON_VERSION}_1_amd64.deb \
    && rm python-${PYTHON_VERSION}_1_amd64.deb \
    && rm -rf /var/lib/apt/lists/* \
    && /opt/python/${PYTHON_VERSION}/bin/pip install --upgrade pip setuptools wheel

ARG PYTHON_VERSION=3.12.9
RUN curl -fsSL -O https://cdn.rstudio.com/python/${OS_IDENTIFIER}/pkgs/python-${PYTHON_VERSION}_1_amd64.deb \
    && export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install -f -y ./python-${PYTHON_VERSION}_1_amd64.deb \
    && rm python-${PYTHON_VERSION}_1_amd64.deb \
    && rm -rf /var/lib/apt/lists/* \
    && /opt/python/${PYTHON_VERSION}/bin/pip install --upgrade pip setuptools wheel

# Use the last version installed as our default
RUN ln -s /opt/python/${PYTHON_VERSION}/bin/python /usr/local/bin/python3
RUN ln -s /opt/python/${PYTHON_VERSION}/bin/pip /usr/local/bin/pip

# We need rsconnect-python to be system wide and in the path
RUN /usr/local/bin/pip install rsconnect-python
ENV PATH="/opt/python/3.12.9/bin:$PATH"

# 
# Install Multiple Versions of R
# 

# Install R versions
ENV R_VERSION=4.1.3
RUN curl -O https://cdn.rstudio.com/r/${OS_IDENTIFIER}/pkgs/r-${R_VERSION}_1_amd64.deb
RUN apt-get install -y ./r-${R_VERSION}_1_amd64.deb
RUN rm ./r-${R_VERSION}_1_amd64.deb

ENV R_VERSION=4.2.3
RUN curl -O https://cdn.rstudio.com/r/${OS_IDENTIFIER}/pkgs/r-${R_VERSION}_1_amd64.deb
RUN apt-get install -y ./r-${R_VERSION}_1_amd64.deb
RUN rm ./r-${R_VERSION}_1_amd64.deb

ENV R_VERSION=4.3.3
RUN curl -O https://cdn.rstudio.com/r/${OS_IDENTIFIER}/pkgs/r-${R_VERSION}_1_amd64.deb
RUN apt-get install -y ./r-${R_VERSION}_1_amd64.deb
RUN rm ./r-${R_VERSION}_1_amd64.deb

ENV R_VERSION=4.4.2
RUN curl -O https://cdn.rstudio.com/r/${OS_IDENTIFIER}/pkgs/r-${R_VERSION}_1_amd64.deb
RUN apt-get install -y ./r-${R_VERSION}_1_amd64.deb
RUN rm ./r-${R_VERSION}_1_amd64.deb

# Symlink default (4.1.3) into path location
ENV R_VERSION=4.1.3
RUN ln -s /opt/R/${R_VERSION}/bin/R /usr/local/bin/R
RUN ln -s /opt/R/${R_VERSION}/bin/Rscript /usr/local/bin/Rscript

# 
# Install Multiple Versions of Quarto
# 

ENV QUARTO_VERSION=1.4.556
# from https://docs.posit.co/resources/install-quarto.html#download-install-quarto-tar
RUN mkdir -p /opt/quarto/${QUARTO_VERSION}
RUN curl -o quarto.tar.gz -L \
    "https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.tar.gz"
RUN tar -zxvf quarto.tar.gz -C "/opt/quarto/${QUARTO_VERSION}" --strip-components=1 
RUN rm quarto.tar.gz

ENV QUARTO_VERSION=1.5.52
RUN mkdir -p /opt/quarto/${QUARTO_VERSION}
RUN curl -o quarto.tar.gz -L \
    "https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.tar.gz"
    RUN tar -zxvf quarto.tar.gz -C "/opt/quarto/${QUARTO_VERSION}" --strip-components=1 
RUN rm quarto.tar.gz

ENV QUARTO_VERSION=1.6.42
RUN mkdir -p /opt/quarto/${QUARTO_VERSION}
RUN curl -o quarto.tar.gz -L \
    "https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.tar.gz"
    RUN tar -zxvf quarto.tar.gz -C "/opt/quarto/${QUARTO_VERSION}" --strip-components=1 
RUN rm quarto.tar.gz

ENV QUARTO_VERSION=1.7.6
RUN mkdir -p /opt/quarto/${QUARTO_VERSION}
RUN curl -o quarto.tar.gz -L \
    "https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.tar.gz"
    RUN tar -zxvf quarto.tar.gz -C "/opt/quarto/${QUARTO_VERSION}" --strip-components=1 
RUN rm quarto.tar.gz

# symlink the earliest into the path location
ENV QUARTO_VERSION=1.4.556
RUN ln -s /opt/quarto/${QUARTO_VERSION}/bin/quarto /usr/bin/quarto

# 
# Install code-server
# 

RUN curl -fsSL https://code-server.dev/install.sh | sh

# extensions to code-server
RUN code-server --install-extension ms-python.python
RUN code-server --install-extension quarto.quarto

# create a code-server config file and set password to none
RUN mkdir -p ~/.config/code-server
RUN printf "bind-addr: 127.0.0.1:8080\nauth: none\ncert: false" > ~/.config/code-server/config.yaml

# turn off workspace trusting
RUN mkdir -p /root/.local/share/code-server/User
RUN printf '{\n\t"security.workspace.trust.enabled": false,\n\t"security.workspace.trust.banner": "never",\n\t"security.workspace.trust.startupPrompt": "never"\n}' \
    > /root/.local/share/code-server/User/settings.json

# Expose port
EXPOSE 8080

WORKDIR /home/coder/workspace
ENV DEFAULT_WORKSPACE=/home/coder/workspace

# Start code-server
# use http://localhost:8080?folder=/home/coder/workspace to connect and open our test dir.
# CMD ["/usr/bin/code-server", "--bind-addr", "0.0.0.0:8080"]
ENTRYPOINT ["/home/coder/entrypoint.sh"]