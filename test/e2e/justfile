
# Build and run all tests against in development
default: dev

# Install Cypress dependencies using npm
install:
    npm install

# Build the specified docker image using docker compose
build service:
    docker compose build "{{service}}"

start service:
    docker compose up -d "{{service}}"

# Stop all services using docker compose
stop:
    docker compose down --volumes --remove-orphans

lint:
    npm run lint

clear-credentials:
    #!/usr/bin/env bash
    set -euo pipefail

    cat <<EOF > e2e-test.connect-credentials
    # File updated and managed by e2e tests. Refrain from updating it manually.

    EOF

dev: 
    #!/usr/bin/env bash
    set -euo pipefail
    just build-publisher
    just e2e

e2e:
    #!/usr/bin/env bash
    set -euo pipefail

    function cleanup() {
        just clear-credentials
    }
    trap cleanup EXIT

    just clear-credentials
    just install
    just start "connect-publisher-e2e"
    just start "code-server"
    npm run cypress:open

# This will force a rebuild all of the images, but you can also just build one of them
# using the command `docker compose build --no-cache <service-name>` where <service-name> is 
# listed in the docker-compose.yml file ( code-server & connect-publisher-e2e)
# NOTE: `docker compose` will build an image if it is needed and will use the cache, so no real reason to normally do this.`
re-build-images:
    just build --no-cache "connect-publisher-e2e"
    just build --no-cache "code-server"

build-publisher:
    USE_PLATFORM="linux/amd64" just ../../build
    USE_PLATFORM="linux/amd64" just ../../package

old-dev:
    #!/usr/bin/env bash
    set -euo pipefail

    function cleanup() {
        just clear-credentials
    }
    trap cleanup EXIT

    USE_PLATFORM="linux/amd64" just ../../build
    USE_PLATFORM="linux/amd64" just ../../package
    just clear-credentials
    just install
    # just build "connect-publisher-e2e"
    # just build "code-server"
    just start "connect-publisher-e2e"
    just start "code-server"
    npm run cypress:open