# Defines an image that installs connect-manager and a Connect DEB
# The Connect host to be used as the publishing target.

FROM ubuntu:22.04 AS e2e-publisher-connect

# Configure apt-get to use the mirror in us-east-1 instead of the Docker default of archive.ubuntu.com
RUN sed -i "s/archive.ubuntu.com/us-east-1.ec2.archive.ubuntu.com/g" /etc/apt/sources.list

ARG DEBIAN_FRONTEND=noninteractive
ARG CONNECT_MANAGER_VERSION=0.5.1
ARG CONNECT_OS=ubuntu22
ARG OS_IDENTIFIER=ubuntu-2204
RUN export TZ=America/New_York

# Install prerequisites
RUN export DEBIAN_FRONTEND=noninteractive && \
  apt-get update && \
  apt-get install -y \
  apt-transport-https \
  build-essential \
  curl \
  dnsutils \
  gawk \
  gfortran \
  git \
  ldap-utils \
  libbz2-dev \
  libcurl4-openssl-dev \
  libdeflate-dev \
  libev-dev \
  libffi-dev \
  liblzma-dev \
  libncurses5-dev \
  libncursesw5-dev \
  libopenblas-dev \
  libpaper-utils \
  libpcre2-dev \
  libreadline-dev \
  libsodium-dev \
  libssl-dev \
  libsqlite3-dev \
  libxml2-dev \
  libzmq3-dev \
  llvm \
  make \
  media-types \
  mailcap \
  python3-openssl \
  rrdtool \
  software-properties-common \
  sssd-ldap \
  sudo \
  tk-dev \
  unzip \
  vim \
  wget \
  xz-utils \
  zip \
  zlib1g-dev \
  && rm -rf /var/lib/apt/lists/*

# # from connect's dockerfile
# RUN export DEBIAN_FRONTEND=noninteractive && \
#     apt-get update && \
#     apt-get install -y \
#     apt-transport-https \
#     build-essential \
#     curl \
#     dnsutils \
#     dpkg-sig \
#     gawk \
#     git \
#     ldap-utils \
#     libcurl4-openssl-dev \
#     libev-dev \
#     libffi-dev \
#     libsodium-dev \
#     libssl-dev \
#     libtinfo5 \
#     libxml2-dev \
#     libzmq3-dev \
#     rrdtool \
#     software-properties-common \
#     sssd-ldap \
#     sudo \
#     vim \
#     && rm -rf /var/lib/apt/lists/*



# 
# Install Multiple Versions of Python
# 

# Install Python and make it default (used by build scripts)
ARG PYTHON_VERSION=3.10.16
RUN curl -fsSL -O https://cdn.rstudio.com/python/${OS_IDENTIFIER}/pkgs/python-${PYTHON_VERSION}_1_amd64.deb \
    && export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install -f -y ./python-${PYTHON_VERSION}_1_amd64.deb \
    && rm python-${PYTHON_VERSION}_1_amd64.deb \
    && rm -rf /var/lib/apt/lists/* \
    && /opt/python/${PYTHON_VERSION}/bin/pip install --upgrade pip setuptools wheel

ARG PYTHON_VERSION=3.11.11
RUN curl -fsSL -O https://cdn.rstudio.com/python/${OS_IDENTIFIER}/pkgs/python-${PYTHON_VERSION}_1_amd64.deb \
    && export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install -f -y ./python-${PYTHON_VERSION}_1_amd64.deb \
    && rm python-${PYTHON_VERSION}_1_amd64.deb \
    && rm -rf /var/lib/apt/lists/* \
    && /opt/python/${PYTHON_VERSION}/bin/pip install --upgrade pip setuptools wheel

ARG PYTHON_VERSION=3.12.9
RUN curl -fsSL -O https://cdn.rstudio.com/python/${OS_IDENTIFIER}/pkgs/python-${PYTHON_VERSION}_1_amd64.deb \
    && export DEBIAN_FRONTEND=noninteractive \
    && apt-get update \
    && apt-get install -f -y ./python-${PYTHON_VERSION}_1_amd64.deb \
    && rm python-${PYTHON_VERSION}_1_amd64.deb \
    && rm -rf /var/lib/apt/lists/* \
    && /opt/python/${PYTHON_VERSION}/bin/pip install --upgrade pip setuptools wheel

# Use the last version installed as our default
RUN ln -s /opt/python/${PYTHON_VERSION}/bin/python /usr/local/bin/python3


# # Install pyenv
# RUN curl https://pyenv.run | bash
# # This puts pyenv into /root/.pyenv/bin

# # installed into /root/.pyenv/versions/${PYTHON_VERSION}/bin
# # executable is /root/.pyenv/versions/${PYTHON_VERSION}/bin/python3.10

# # Needs to be installed as user: rstudio-connect

# ENV PYTHON_VERSION="3.10.16"
# RUN /root/.pyenv/bin/pyenv install "${PYTHON_VERSION}"
# RUN /root/.pyenv/versions/"${PYTHON_VERSION}"/bin/pip install --upgrade pip setuptools wheel
# # executable is /root/.pyenv/versions/3.10.16/bin/python3.10

# ENV PYTHON_VERSION="3.11.11"
# RUN /root/.pyenv/bin/pyenv install "${PYTHON_VERSION}"
# RUN /root/.pyenv/versions/"${PYTHON_VERSION}"/bin/pip install --upgrade pip setuptools wheel
# # executable is /root/.pyenv/versions/3.11.11/bin/python3.11

# ENV PYTHON_VERSION="3.12.9"
# RUN /root/.pyenv/bin/pyenv install "${PYTHON_VERSION}"
# RUN /root/.pyenv/versions/"${PYTHON_VERSION}"/bin/pip install --upgrade pip setuptools wheel
# # executable is /root/.pyenv/versions/3.12.9/bin/python3.12

# # Update the symbolic link of python3 to point to 3.10..
# RUN rm /usr/bin/python3
# RUN ln -s /root/.pyenv/versions/3.10.16/bin/python3.10 /usr/bin/python3

# # USE UV to install python... faster, but don't know how to properly install setuptools..

# ADD https://astral.sh/uv/0.5.29/install.sh /uv-installer.sh
# RUN sh /uv-installer.sh && rm /uv-installer.sh
# ENV PATH="/root/.local/bin/:$PATH"

# # Install Python using UV
# ENV PYTHON_VERSION="3.10.16"
# RUN UV_PYTHON_INSTALL_DIR=/opt/python uv python install ${PYTHON_VERSION}
# RUN uv pip install --system pip setuptools wheel
# # /opt/python/cpython-3.10.16-linux-x86_64-gnu/bin/python3

# ENV PYTHON_VERSION="3.11.11"
# RUN UV_PYTHON_INSTALL_DIR=/opt/python uv python install ${PYTHON_VERSION}
# RUN /opt/python/cpython-"${PYTHON_VERSION}"-linux-x86_64-gnu/bin/pip install --upgrade pip setuptools wheel
# # /opt/python/cpython-3.11.11-linux-x86_64-gnu/bin/python3


# ENV PYTHON_VERSION="3.12.9"
# RUN UV_PYTHON_INSTALL_DIR=/opt/python uv python install ${PYTHON_VERSION}
# RUN /opt/python/cpython-"${PYTHON_VERSION}"-linux-x86_64-gnu/bin/pip install --upgrade pip setuptools wheel
# # /opt/python/cpython-3.12.9-linux-x86_64-gnu/bin/python3

# # last install makes it active
# # /usr/bin/python3 -> python3.12

# 
# Install Multiple Versions of R
# 

# Install R versions
ENV R_VERSION=4.1.3
RUN curl -O https://cdn.rstudio.com/r/${OS_IDENTIFIER}/pkgs/r-${R_VERSION}_1_amd64.deb
RUN apt-get install -y ./r-${R_VERSION}_1_amd64.deb
RUN rm ./r-${R_VERSION}_1_amd64.deb

ENV R_VERSION=4.2.3
RUN curl -O https://cdn.rstudio.com/r/${OS_IDENTIFIER}/pkgs/r-${R_VERSION}_1_amd64.deb
RUN apt-get install -y ./r-${R_VERSION}_1_amd64.deb
RUN rm ./r-${R_VERSION}_1_amd64.deb

ENV R_VERSION=4.3.3
RUN curl -O https://cdn.rstudio.com/r/${OS_IDENTIFIER}/pkgs/r-${R_VERSION}_1_amd64.deb
RUN apt-get install -y ./r-${R_VERSION}_1_amd64.deb
RUN rm ./r-${R_VERSION}_1_amd64.deb

ENV R_VERSION=4.4.2
RUN curl -O https://cdn.rstudio.com/r/${OS_IDENTIFIER}/pkgs/r-${R_VERSION}_1_amd64.deb
RUN apt-get install -y ./r-${R_VERSION}_1_amd64.deb
RUN rm ./r-${R_VERSION}_1_amd64.deb

# Symlink default (4.1.3) into path location
ENV R_VERSION=4.1.3
RUN ln -s /opt/R/${R_VERSION}/bin/R /usr/local/bin/R
RUN ln -s /opt/R/${R_VERSION}/bin/Rscript /usr/local/bin/Rscript

# 
# Install Multiple Versions of Quarto
# 

ENV QUARTO_VERSION=1.4.556
# from https://docs.posit.co/resources/install-quarto.html#download-install-quarto-tar
RUN mkdir -p /opt/quarto/${QUARTO_VERSION}
RUN curl -o quarto.tar.gz -L \
    "https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.tar.gz"
RUN tar -zxvf quarto.tar.gz -C "/opt/quarto/${QUARTO_VERSION}" --strip-components=1 
RUN rm quarto.tar.gz

ENV QUARTO_VERSION=1.5.52
RUN mkdir -p /opt/quarto/${QUARTO_VERSION}
RUN curl -o quarto.tar.gz -L \
    "https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.tar.gz"
    RUN tar -zxvf quarto.tar.gz -C "/opt/quarto/${QUARTO_VERSION}" --strip-components=1 
RUN rm quarto.tar.gz

ENV QUARTO_VERSION=1.6.42
RUN mkdir -p /opt/quarto/${QUARTO_VERSION}
RUN curl -o quarto.tar.gz -L \
    "https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.tar.gz"
    RUN tar -zxvf quarto.tar.gz -C "/opt/quarto/${QUARTO_VERSION}" --strip-components=1 
RUN rm quarto.tar.gz

ENV QUARTO_VERSION=1.7.6
RUN mkdir -p /opt/quarto/${QUARTO_VERSION}
RUN curl -o quarto.tar.gz -L \
    "https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.tar.gz"
    RUN tar -zxvf quarto.tar.gz -C "/opt/quarto/${QUARTO_VERSION}" --strip-components=1 
RUN rm quarto.tar.gz

# symlink the earliest into the path location
ENV QUARTO_VERSION=1.4.556
RUN ln -s /opt/quarto/${QUARTO_VERSION}/bin/quarto /usr/bin/quarto

# Setup users and groups using cloned script from Connect's docker image: 
# docker/ubuntu24/Dockerfile

# An incoming Jenkins uid/gid alters how the account is created. Allows
# matching uid/gid on the launching Jenkins agent. Configured late to keep
# more layers reusable.
ARG JENKINS_GID=999
ARG JENKINS_UID=999

# Create the jenkins user with the same id:gid as the jenkins-node
RUN groupadd -g $JENKINS_GID jenkins && \
    useradd -m -d /var/lib/jenkins -u $JENKINS_UID -g jenkins jenkins

# give jenkins root(sudo) access
RUN echo "%jenkins  ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/jenkins
RUN chmod 440 /etc/sudoers.d/jenkins

# Create a cache dir owned by jenkins to prevent rosetta race condition on Apple
# Silicon and allow Quarto content to run. Without this, the dir may be owned by
# root.
RUN mkdir -p /var/lib/jenkins/.cache && chown jenkins:jenkins /var/lib/jenkins/.cache

# The data-scientists group is use for testing permissions for shared group resources.
# This group can be used when testing multi-user/alternate-user execution with a non-primary, shared group
RUN groupadd data-scientists

# The rstudio-connect user mirrors the user we create during installation.
# This user is often used as the default RunAs user by tests and when testing
# primary-user execution.
#
# The rstudio-connect user DOES NOT have a home directory. Its primary group
# is rstudio-connect. It is also a member of the shared data-scientists group
RUN useradd -r -M -s /usr/sbin/nologin -G data-scientists \
    -c "System user for rstudio-connect daemon" rstudio-connect

# The shiny-runner user is an alternate RunAs user. This user can be used when
# testing multi-user/alternate-user execution.
#
# The shiny-runner user DOES have a home directory. Its primary group is
# shiny-runner. It is a member of the data-scientists, jenkins, and rstudio-connect groups.
RUN useradd -r -m -s /usr/sbin/nologin -G data-scientists,jenkins,rstudio-connect \
    -c "Alternate RunAs user with home directory" shiny-runner

# The nohome-runner user is an alternate RunAs user. This user can be used
# when testing multi-user/alternate user execution.
#
# The nohome-runner DOES NOT have a home directory. Its primary group is
# nohome-runner. It is a member of the data-scientists, jenkins, and rstudio-connect groups.
RUN useradd -r -M -s /usr/sbin/nologin -G data-scientists,jenkins,rstudio-connect \
    -c "Alternate RunAs user without a home directory" nohome-runner

# Ths nonmember-runner user is an invalid RunAs user. This user can be used
# when testing group validation.
#
# The nonmember-runner user is NOT a member of the jenkins or rstudio-connect
# groups.
RUN useradd -r -m -s /usr/sbin/nologin \
    -c "Alternate RunAs user with home directory" nonmember-runner

# because licensing
RUN mkdir /var/lib/rstudio-connect

# Enable git when running as users other than the GH actions runner
# https://github.com/actions/checkout/issues/766
RUN git config --global --add safe.directory /connect
RUN su - jenkins -c 'git config --global --add safe.directory /connect'

WORKDIR /opt/connect-manager

RUN curl -fsSL "https://cdn.rstudio.com/connect/connect-manager/${CONNECT_MANAGER_VERSION}/connect-manager-${CONNECT_MANAGER_VERSION}.tar.xz" | tar --strip-components=1 -xvJf -

RUN tar \
    --strip-components=1 \
    --exclude=PKG-INFO \
    --exclude=README.md \
    --exclude='*.egg-info' \
    --exclude='setup.*' \
    -xzvf connect-manager-*.tar.gz

RUN rm -f \
    connect-manager-client-*.tar.gz \
    connect_manager_client-*.whl

# Pull and Install Connect .deb
RUN curl -O https://cdn.posit.co/connect/2025.02/rstudio-connect_2025.02.0~${CONNECT_OS}_amd64.deb
RUN apt-get update \
  && apt-get install -y ./rstudio-connect_2025.02.0~${CONNECT_OS}_amd64.deb \
  && rm -rf rstudio-connect_2025.02.0~${CONNECT_OS}_amd64.deb \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/*

# Copy Connect config
COPY test/e2e/config/connect.gcfg /etc/rstudio-connect/rstudio-connect.gcfg

# Copy Bootstrap Key
COPY test/e2e/bootstrap-secret.key /etc/rstudio-connect/bootstrap-secret.key

ENV CONNECT_LICENSE=${CONNECT_LICENSE}

CMD [ "/opt/connect-manager/connect-manager", \
  "--start-connect", \
  "--connect-binary", "/opt/rstudio-connect/bin/connect", \
  "--connect-user", "rstudio-connect", \
  "--license-manager-binary", "/opt/rstudio-connect/bin/license-manager", \
  "--connect-log", "/var/log/rstudio/rstudio-connect/rstudio-connect.log", \
  "--manager-log", "/var/log/rstudio/rstudio-connect/connect-manager.log", \
  "--connect-config-prefix", "/etc/rstudio-connect", \
  "--connect-config", "rstudio-connect.gcfg", \
  "--manager-port", "4723" ]
